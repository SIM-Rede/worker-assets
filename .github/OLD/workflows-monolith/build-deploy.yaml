name: Build and Deploy

on:
  workflow_call:
    inputs:
      branchname:
        required: true
        type: string
      apiname:
        required: true
        type: string
      projectname:
        required: true
        type: string
      memory:
        required: false
        type: string
        default: "256"
      cpu:
        required: false
        type: string
        default: "200"

env:
  HPA_STG: false #TODO alterar uso ou não de HPA para esta aplicação (em STG, DEV não aplica e PROD é padrão já utilizar HPA)
  MIN_REP: 1 #TODO determina o número mínimo de réplicas que estarão aplicadas no HPA nos 3 ambientes, caso de HPA_STG=true, se FALSE, Dev e Stg = 1 e Prd = MIN_REP
  MAX_REP: 3 #TODO determina o número máximo de réplicas que estarão aplicadas no HPA nos 3 ambientes, caso de HPA_STG=true, se FALSE, Dev e Stg = 1 e Prd = MAX_REP

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ inputs.branchname }}
          path: ${{ inputs.projectname }}

      - uses: benjlevesque/short-sha@v1.2
        id: short-sha
        with:
          length: 7

      - name: Get Branch Short Name
        id: branch-short
        run: |
          bshort=$(echo ${{ inputs.branchname }} | cut -c1-3)
          echo "::set-output name=bshort::$bshort"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: DockerHub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      #TODO Habilitar esta linha (na primeira linha do RUN abaixo) somente se for necessário o deploy desta instancia em outro cliente, fora a SIM Rede, lembra-se de habilitar os steps que estão comentados no final do arquivo
      # if [ ${{ steps.branch-short.outputs.bshort }} != 'dev' ] ; then echo "::set-output name=kube_config_{CLIENTE}::${{ secrets.{CLIENTE}_KUBE_CONFIG_DATA }}" ; fi #TODO trocar {CLIENTE} pelo nome do cliente, como por exemplo: CHARRUA_KUBE_CONFIG_DATA

      - name: Determine Environment Variables
        id: select-cluster
        run: |
          if [ ${{ steps.branch-short.outputs.bshort }} = 'dev' ] ; then echo "::set-output name=kube_config::${{ secrets.DEV_KUBE_CONFIG_DATA }}" ; echo "::set-output name=namespace::dev" ; sed -i "s/<AMBIENTE>/-dev/g" ${{ inputs.projectname }}/Dockerfile ; fi
          if [ ${{ steps.branch-short.outputs.bshort }} = 'rel' ] ; then echo "::set-output name=kube_config::${{ secrets.STG_KUBE_CONFIG_DATA }}" ; echo "::set-output name=namespace::qa" ; sed -i "s/<AMBIENTE>/-stg/g" ${{ inputs.projectname }}/Dockerfile ; fi
          if [ ${{ steps.branch-short.outputs.bshort }} = 'mai' ] ; then echo "::set-output name=kube_config::${{ secrets.PRD_KUBE_CONFIG_DATA }}" ; echo "::set-output name=namespace::prod" ; sed -i "s/<AMBIENTE>/-prd/g" ${{ inputs.projectname }}/Dockerfile ; fi
          if [ ${{ env.HPA_STG == 'true' }} ] ; then echo "MIN_REPLICAS=${{ env.MIN_REP }}" >> $GITHUB_ENV ; fi
          if [ ${{ env.HPA_STG == 'true' }} ] ; then echo "MAX_REPLICAS=${{ env.MAX_REP }}" >> $GITHUB_ENV ; fi
          if [ ${{ env.HPA_STG == 'false' }} ] ; then echo "MIN_REPLICAS=1" >> $GITHUB_ENV ; fi
          if [ ${{ env.HPA_STG == 'false' }} ] ; then echo "MAX_REPLICAS=1" >> $GITHUB_ENV ; fi
          echo "HPA-NAME=$(echo ${{ inputs.apiname }} | tr -d '-')" >> $GITHUB_ENV

      - name: Build and Push
        uses: docker/build-push-action@v3
        with:
          context: "${{ inputs.projectname }}"
          push: true
          tags: simlabsti/${{ inputs.apiname }}-${{ steps.branch-short.outputs.bshort }}:${{ steps.short-sha.outputs.sha }}

      #TODO Para coletar IP do Ingress Interno. Não necessário neste momento
      # - name: Get Private Addr
      #   uses: wahyd4/kubectl-helm-action@master
      #   env:
      #     KUBE_CONFIG_DATA: ${{ env.KUBE_CONFIG }}
      #   with:
      #     args: |
      #       echo "PRIVATE_IP=$(kubectl describe services -n internal-ingress internal-ingress-ingress-nginx-controller-internal | grep 'LoadBalancer Ingress' | cut -d':' -f2 | sed 's/ //g')" >> $GITHUB_ENV

      - name: Change Deploy
        shell: bash
        run: |
          sed -i "s/<IMAGE>/${{ inputs.apiname }}-${{ steps.branch-short.outputs.bshort }}:${{ steps.short-sha.outputs.sha }}/g" ${{ inputs.projectname }}/K8S/deployment.yaml
          sed -i "s/<CPU>/${{ inputs.cpu }}/g" ${{ inputs.projectname }}/K8S/deployment.yaml
          sed -i "s/<MEM>/${{ inputs.memory }}/g" ${{ inputs.projectname }}/K8S/deployment.yaml
          sed -i "s/<HPA>/hpa-${{ env.HPA-NAME }}/g" ${{ inputs.projectname }}/K8S/hpa.yaml
          sed -i "s/<NAME>/${{ env.HPA-NAME }}/g" ${{ inputs.projectname }}/K8S/hpa.yaml
          sed -i "s/<CPU>/$(echo $((${{ inputs.cpu }}*51/100)))/g" ${{ inputs.projectname }}/K8S/hpa.yaml
          sed -i "s/<MEM>/$(echo $((${{ inputs.memory }}*1024*1024*80/100)))/g" ${{ inputs.projectname }}/K8S/hpa.yaml
          if [ ${{ steps.branch-short.outputs.bshort }} = 'dev' ] ; then sed -i "s/<ROLE>/dev/g" ${{ inputs.projectname }}/K8S/deployment.yaml ; fi
          if [ ${{ steps.branch-short.outputs.bshort }} = 'rel' ] ; then sed -i "s/<ROLE>/qa/g" ${{ inputs.projectname }}/K8S/deployment.yaml ; fi
          if [ ${{ steps.branch-short.outputs.bshort }} = 'mai' ] ; then sed -i "s/<ROLE>/prod/g" ${{ inputs.projectname }}/K8S/deployment.yaml ; fi

      - name: Deploy to Cluster SIM
        uses: wahyd4/kubectl-helm-action@master
        env:
          KUBE_CONFIG_DATA: ${{ steps.select-cluster.outputs.kube_config }}
        with:
          args: |
            kubectl apply -f ${{ inputs.projectname }}/K8S/ -n ${{ steps.select-cluster.outputs.namespace }} --request-timeout="800"

      - name: Deploy HPA Prd SIM
        if: ${{ steps.branch-short.outputs.bshort == 'mai' }}
        uses: wahyd4/kubectl-helm-action@master
        env:
          KUBE_CONFIG_DATA: ${{ steps.select-cluster.outputs.kube_config }}
        with:
          args: |
            kubectl patch hpa -n ${{ steps.select-cluster.outputs.namespace }} hpa-${{ env.HPA-NAME }} -p '{\"spec\":{\"maxReplicas\": ${{ env.MAX_REP }}}}' --request-timeout="800"
            kubectl patch hpa -n ${{ steps.select-cluster.outputs.namespace }} hpa-${{ env.HPA-NAME }} -p '{\"spec\":{\"minReplicas\": ${{ env.MIN_REP }}}}' --request-timeout="800"

      - name: Deploy HPA Stg SIM
        if: ${{ steps.branch-short.outputs.bshort == 'rel' && env.HPA_STG == 'true' }}
        uses: wahyd4/kubectl-helm-action@master
        env:
          KUBE_CONFIG_DATA: ${{ steps.select-cluster.outputs.kube_config }}
        with:
          args: |
            kubectl patch hpa -n ${{ steps.select-cluster.outputs.namespace }} hpa-${{ env.HPA-NAME }} -p '{\"spec\":{\"maxReplicas\": ${{ env.MAX_REPLICAS }}}}' --request-timeout="800"
            kubectl patch hpa -n ${{ steps.select-cluster.outputs.namespace }} hpa-${{ env.HPA-NAME }} -p '{\"spec\":{\"minReplicas\": ${{ env.MIN_REPLICAS }}}}' --request-timeout="800"

      - name: Delete HPA Stg SIM
        if: ${{ steps.branch-short.outputs.bshort == 'rel' && env.HPA_STG == 'false' }}
        uses: wahyd4/kubectl-helm-action@master
        env:
          KUBE_CONFIG_DATA: ${{ steps.select-cluster.outputs.kube_config }}
        with:
          args: |
            kubectl patch hpa -n ${{ steps.select-cluster.outputs.namespace }} hpa-${{ env.HPA-NAME }} -p '{\"spec\":{\"minReplicas\": ${{ env.MIN_REPLICAS }}}}' --request-timeout="800"
            kubectl patch hpa -n ${{ steps.select-cluster.outputs.namespace }} hpa-${{ env.HPA-NAME }} -p '{\"spec\":{\"maxReplicas\": ${{ env.MAX_REPLICAS }}}}' --request-timeout="800"

      #TODO Linhas abaixo se referem ao deploy para ambiente de outra empresa,
      #     habilitar somente se for necessário implementar este recurso em outra empresa, fora a SIM Rede
      # - name: Change Deploy {CLIENTE} #TODO trocar {CLIENTE} pelo nome do cliente, como por exemplo: Charrua
      #   shell: bash
      #   run: |
      #     if [ ${{ steps.branch-short.outputs.bshort }} = 'rel' ] ; then sed -i "s/<ROLE>/qa/g" ${{ inputs.projectname }}/K8S/deployment.yaml ; sed -i "s/#//g" ${{ inputs.projectname }}/K8S/deployment.yaml ; fi

      # - name: Deploy to Cluster {CLIENTE} #TODO trocar {CLIENTE} pelo nome do cliente, como por exemplo: Charrua
      #   if: ${{ steps.branch-short.outputs.bshort != 'dev' }}
      #   uses: wahyd4/kubectl-helm-action@master
      #   env:
      #     KUBE_CONFIG_DATA: ${{ steps.select-cluster.outputs.kube_config_{CLIENTE} }}  #TODO trocar {CLIENTE} pelo nome do cliente, como por exemplo: steps.select-cluster.outputs.kube_config_charrua
      #   with:
      #     args: |
      #       kubectl apply -f ${{ inputs.projectname }}/K8S/ -n ${{ steps.select-cluster.outputs.namespace }} --request-timeout="800"

      # - name: Deploy HPA Prd {CLIENTE} #TODO trocar {CLIENTE} pelo nome do cliente, como por exemplo: Charrua
      #   if: ${{ steps.branch-short.outputs.bshort == 'mai' }}
      #   uses: wahyd4/kubectl-helm-action@master
      #   env:
      #     KUBE_CONFIG_DATA: ${{ steps.select-cluster.outputs.kube_config_{CLIENTE} }}  #TODO trocar {CLIENTE} pelo nome do cliente, como por exemplo: steps.select-cluster.outputs.kube_config_charrua
      #   with:
      #     args: |
      #       kubectl patch hpa -n ${{ steps.select-cluster.outputs.namespace }} hpa-${{ env.HPA-NAME }} -p '{\"spec\":{\"maxReplicas\": ${{ env.MAX_REP }}}}' --request-timeout="800"
      #       kubectl patch hpa -n ${{ steps.select-cluster.outputs.namespace }} hpa-${{ env.HPA-NAME }} -p '{\"spec\":{\"minReplicas\": ${{ env.MIN_REP }}}}' --request-timeout="800"

      # - name: Deploy HPA Stg {CLIENTE} #TODO trocar {CLIENTE} pelo nome do cliente, como por exemplo: Charrua
      #   if: ${{ steps.branch-short.outputs.bshort == 'rel' && env.HPA_STG == 'true' }}
      #   uses: wahyd4/kubectl-helm-action@master
      #   env:
      #     KUBE_CONFIG_DATA: ${{ steps.select-cluster.outputs.kube_config_{CLIENTE} }}  #TODO trocar {CLIENTE} pelo nome do cliente, como por exemplo: steps.select-cluster.outputs.kube_config_charrua
      #   with:
      #     args: |
      #       kubectl patch hpa -n ${{ steps.select-cluster.outputs.namespace }} hpa-${{ env.HPA-NAME }} -p '{\"spec\":{\"maxReplicas\": ${{ env.MAX_REPLICAS }}}}' --request-timeout="800"
      #       kubectl patch hpa -n ${{ steps.select-cluster.outputs.namespace }} hpa-${{ env.HPA-NAME }} -p '{\"spec\":{\"minReplicas\": ${{ env.MIN_REPLICAS }}}}' --request-timeout="800"

      # - name: Delete HPA Stg {CLIENTE} #TODO trocar {CLIENTE} pelo nome do cliente, como por exemplo: Charrua
      #   if: ${{ steps.branch-short.outputs.bshort == 'rel' && env.HPA_STG == 'false' }}
      #   uses: wahyd4/kubectl-helm-action@master
      #   env:
      #     KUBE_CONFIG_DATA: ${{ steps.select-cluster.outputs.kube_config_{CLIENTE} }}  #TODO trocar {CLIENTE} pelo nome do cliente, como por exemplo: steps.select-cluster.outputs.kube_config_charrua
      #   with:
      #     args: |
      #       kubectl patch hpa -n ${{ steps.select-cluster.outputs.namespace }} hpa-${{ env.HPA-NAME }} -p '{\"spec\":{\"minReplicas\": ${{ env.MIN_REPLICAS }}}}' --request-timeout="800"
      #       kubectl patch hpa -n ${{ steps.select-cluster.outputs.namespace }} hpa-${{ env.HPA-NAME }} -p '{\"spec\":{\"maxReplicas\": ${{ env.MAX_REPLICAS }}}}' --request-timeout="800"
